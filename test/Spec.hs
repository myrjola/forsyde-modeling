import Test.Hspec
import Control.Monad.Trans.State
import System.IO.Silently

import ForSyDe.Shallow

import Lab2

testImageWidth :: Int
testImageWidth = 9
testImageHeight :: Int
testImageHeight = 10

testImage :: Signal Int
testImage = signal[
  0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0]

testImageGrayscaled :: Signal Int
testImageGrayscaled = signal[
  31,0,0,0,0,0,0,0,0,
  0,79,0,0,0,0,0,0,0,
  0,143,0,0,0,0,0,0,0,
  0,0,79,0,0,0,0,0,0,
  0,0,143,0,0,0,0,0,0,
  0,0,0,79,0,0,0,0,0,
  0,0,0,143,0,0,0,0,0,
  0,0,0,31,0,0,0,0,0,
  0,0,0,0,79,0,0,0,0,
  0,0,0,0,143,0,0,0,0]

testImageResized :: Signal Int
testImageResized = signal[
  27,0,0,0,
  35,19,0,0,
  0,55,0,0,
  0,43,0,0,
  0,0,55,0]

testImageEdgesDetected :: Signal Int
testImageEdgesDetected = signal[
  127,108,
  37,173,
  77,151]

testImageASCII :: Signal Char
testImageASCII = signal[
  'E','V',
  'Q','/',
  '#','S']

massiveTestImageWidth :: Int
massiveTestImageWidth = 24
massiveTestImageHeight :: Int
massiveTestImageHeight = 24

massiveTestImage :: Signal Int
massiveTestImage = signal[
  129,82,95,129,82,95,129,82,95,129,82,95,128,81,96,134,90,90,161,127,68,
  203,185,37,242,237,9,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,254,0,237,230,13,197,177,41,155,119,73,130,85,93,128,81,95,128,82,94,
  128,82,94,128,82,94,128,82,94,139,91,105,139,91,105,139,91,105,138,90,106,
  154,112,91,203,181,45,241,235,12,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,235,227,17,
  194,170,52,150,106,94,138,89,105,138,90,104,138,90,104,138,90,104,149,98,114,
  149,98,114,148,98,114,171,131,89,225,211,30,254,253,1,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,253,252,2,218,201,38,163,120,97,147,96,115,
  148,98,114,148,98,114,158,106,123,157,105,124,175,133,100,235,225,25,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,254,1,225,210,36,169,124,106,156,104,123,156,105,122,165,112,133,
  177,132,114,226,209,41,254,254,1,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,254,253,2,221,202,48,
  172,124,120,165,112,132,175,123,138,213,185,72,253,252,3,255,255,0,255,255,0,
  255,255,0,245,245,10,241,241,14,250,250,5,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,248,248,7,242,242,13,250,250,5,255,255,0,
  255,255,0,255,255,0,251,249,6,204,171,86,172,118,142,197,154,118,243,234,24,
  255,255,0,255,255,0,255,255,0,207,207,48,97,97,158,71,71,184,133,133,122,
  239,239,16,255,255,0,255,255,0,255,255,0,255,255,0,223,223,32,117,117,138,
  76,76,179,132,132,123,234,234,21,255,255,0,255,255,0,255,255,0,236,223,37,
  191,144,129,222,196,77,255,255,0,255,255,0,255,255,0,251,251,4,93,93,162,
  2,2,253,0,0,255,12,12,243,173,173,82,255,255,0,255,255,0,255,255,0,255,255,0,
  112,112,143,3,3,252,0,0,255,7,7,248,145,145,110,255,255,0,255,255,0,255,255,0,
  254,253,3,213,180,97,240,227,40,255,255,0,255,255,0,255,255,0,241,241,14,
  60,60,195,0,0,255,0,0,255,5,5,250,138,138,117,255,255,0,255,255,0,255,255,0,
  255,255,0,72,72,183,0,0,255,0,0,255,1,1,254,112,112,143,255,255,0,255,255,0,
  255,255,0,255,255,0,233,214,59,254,253,3,255,255,0,255,255,0,255,255,0,
  253,253,2,124,124,131,8,8,247,0,0,255,31,31,224,192,192,63,255,255,0,255,255,0,
  255,255,0,255,255,0,146,146,109,15,15,240,0,0,255,20,20,235,165,165,90,
  255,255,0,255,255,0,255,255,0,255,255,0,249,243,20,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,230,230,25,152,152,103,128,128,128,177,177,78,
  251,251,4,255,255,0,255,255,0,255,255,0,255,255,0,242,242,13,157,157,98,
  123,123,132,165,165,90,243,243,12,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,254,252,10,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,252,247,25,250,240,57,
  255,255,0,255,255,0,255,255,0,253,253,2,242,242,13,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,254,254,1,248,248,7,255,255,0,255,255,0,255,255,0,
  255,255,0,246,231,86,246,227,122,255,254,4,255,255,0,255,255,0,238,238,17,
  134,134,121,200,200,55,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,251,251,4,171,171,84,183,183,72,
  255,255,0,255,255,0,255,255,0,254,253,8,244,221,144,244,219,187,252,246,45,
  255,255,0,255,255,0,248,248,7,177,177,78,99,99,156,169,169,86,239,239,16,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,253,253,2,230,230,25,
  142,142,113,104,104,151,216,216,39,255,255,0,255,255,0,255,255,0,251,242,69,
  243,215,203,245,219,231,249,235,131,255,254,8,255,255,0,255,255,0,254,254,1,
  215,215,40,121,121,134,115,115,140,165,165,90,202,202,53,215,215,40,216,216,39,
  199,199,56,156,156,99,111,111,144,133,133,122,229,229,26,255,255,0,255,255,0,
  255,255,0,254,252,21,248,230,158,244,217,234,248,226,238,249,229,217,
  253,245,88,255,255,3,255,255,0,255,255,0,255,255,0,250,250,5,204,204,51,
  140,140,115,128,128,127,130,130,125,122,122,133,127,127,128,143,143,112,
  204,204,51,251,251,4,255,255,0,255,255,0,255,255,0,255,254,6,252,241,113,
  247,227,225,247,225,237,250,233,241,250,233,243,251,236,210,254,249,73,
  255,255,2,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,240,240,15,
  227,227,28,222,222,33,243,243,12,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,3,253,247,96,250,235,221,250,233,242,250,232,241,252,241,247,
  252,241,246,252,241,249,253,243,214,254,250,89,255,254,8,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,254,15,254,249,107,252,242,223,252,240,248,
  252,240,246,252,240,246,254,249,251,254,249,251,254,249,251,253,248,253,
  254,249,227,254,252,141,255,254,51,255,255,5,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,0,255,255,0,255,255,0,255,255,0,255,255,5,255,254,63,
  254,251,160,254,248,238,253,247,252,254,248,251,254,248,251,254,248,251,
  255,254,255,255,254,255,255,254,255,255,254,254,255,254,255,255,254,254,
  255,254,211,255,255,141,255,255,66,255,255,4,255,255,0,255,255,0,255,255,0,
  255,255,0,255,255,13,255,255,79,255,255,147,255,254,218,255,254,255,
  255,254,255,255,254,254,255,254,254,255,254,254,255,254,254]

massiveTestImageAscii :: String
massiveTestImageAscii =
  "  =B@@B,  \n" ++
  " t  Et  V \n" ++
  "N        #\n" ++
  "t        A\n" ++
  "A   ;_   B\n" ++
  "@BVANNAVB@\n" ++
  "Btt#@@VtEN\n" ++
  "ASS    StQ\n" ++
  "E=;BNN#=;A\n" ++
  "VS=    =SV\n"

main :: IO ()
main = hspec $ do describe "Lab2" $ lab2tests
  where
    lab2tests = do
        it "grayscales" $
            grayscaleFilter testImage `shouldBe` testImageGrayscaled
        it "resizes" $
            evalState
                (resizeImage testImageGrayscaled)
                (testImageWidth, testImageHeight) `shouldBe`
            testImageResized
        it "detects edges" $
            evalState (sobelFilter testImageResized) (4, 5) `shouldBe`
            testImageEdgesDetected
        it "converts to ASCII" $
            asciiArt testImageEdgesDetected `shouldBe` testImageASCII
        it "processes image" $
            evalState
                (lab2ImageProcessing testImage)
                (testImageWidth, testImageHeight) `shouldBe`
            testImageASCII
        it "prints larger image" $
            let processing = lab2ImageProcessing massiveTestImage
                (asciiImg,(asciiWidth,_)) =
                    runState
                        processing
                        (massiveTestImageWidth, massiveTestImageHeight)
            in do (output,_) <- capture $ printAsciiArt asciiWidth asciiImg
                  output `shouldBe` massiveTestImageAscii
